name: Build

on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "[Setup] Checkout Repository"
        uses: actions/checkout@v1

      - name: "[Setup] Ensure 'master' branch exists"
        run: |
          git fetch --tags
          git branch --create-reflog master origin/master

      - name: "[Setup] Create GitVersion"
        uses: docker://gittools/gitversion:5.5.2-linux-alpine.3.10-x64-netcoreapp3.1
        with:
          args: /github/workspace /nofetch /output buildserver

      - name: "[Setup] Install .NET Core"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.100

      - name: "[Build] NuGet Restore"
        run: dotnet restore

      - name: "[Build] Build Solution"
        run: |
          dotnet build --no-restore --configuration Release \
            /p:VersionPrefix=$GitVersion_MajorMinorPatch \
            /p:VersionSuffix=$GitVersion_PreReleaseLabel \
            /p:AssemblyVersion=$GitVersion_AssemblySemVer \
            /p:FileVersion=$GitVersion_AssemblySemFileVer \
            /p:InformationalVersion=$GitVersion_InformationalVersion \
            /p:RepositoryBranch=${GITHUB_REF#refs/heads/} \
            /p:RepositoryCommit=$GITHUB_SHA

      - name: "[Test] Run Tests"
        run: |
          dotnet test --no-build --configuration Release

      - name: "[Deploy] Create NuGet Package"
        id: dotnet-pack
        run: |
          dotnet pack \
            --no-restore \
            --no-build \
            --configuration Release \
            /p:VersionPrefix=$GitVersion_MajorMinorPatch \
            /p:VersionSuffix=$GitVersion_PreReleaseLabel \
            /p:AssemblyVersion=$GitVersion_AssemblySemVer \
            /p:FileVersion=$GitVersion_AssemblySemFileVer \
            /p:InformationalVersion=$GitVersion_InformationalVersion \
            /p:RepositoryBranch=${GITHUB_REF#refs/heads/} \
            /p:RepositoryCommit=$GITHUB_SHA
          echo "::set-output name=PACKAGE_VERSION::$(find src/ -type f -iname 'Bashi.Tests.*.nupkg')"

      - name: "[Artifacts] Upload Nuget Package"
        uses: actions/upload-artifact@v1
        with:
          name: Bashi.Tests.Artifacts
          path: ${{ steps.dotnet-pack.outputs.PACKAGE_VERSION }}

      - name: "[Coverage] Upload to Coveralls"
        uses: coverallsapp/github-action@v1.1.1
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: "./coverage/coverage.info"


  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: "[Artifacts] Download Nuget Package"
        uses: actions/download-artifact@v1
        with:
          name: Bashi.Tests.Artifacts

      - name: "[Deploy] Publish Package to GitHub Packages"
        run: dotnet nuget push Bashi.Tests.Artifacts/Bashi.Tests.*.nupkg -k ${{ secrets.GITHUB_TOKEN }} -s https://nuget.pkg.github.com/KK578/index.json

      - name: "[Deploy] Publish Package"
        run: dotnet nuget push Bashi.Tests.Artifacts/Bashi.Tests.*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
